using System.Text;

namespace Generator;

/// <summary>StringBuilder for Source Generator</summary>
internal class StringBuilderSG
{
    public const char IDENT = '\t';

    private readonly StringBuilder sourceBuilder = new();
    private readonly StringBuilder indentation = new();

    #region Basic
    public void Clear()
    {
        sourceBuilder.Clear();
        indentation.Clear();
    }

    //public void Append(string str) => sourceBuilder.Append(str);
    public void AppendLine() => sourceBuilder.AppendLine();
    public void AppendLine(char str)
    {
        if (!char.IsWhiteSpace(str))
        {
            sourceBuilder.Append(indentation);
            sourceBuilder.Append(str);
        }
        sourceBuilder.AppendLine();
    }
    public void AppendLine(string str)
    {
        if (!string.IsNullOrWhiteSpace(str))
        {
            sourceBuilder.Append(indentation);
            sourceBuilder.Append(str);
        }
        sourceBuilder.AppendLine();
    }

    /// <summary>Append line with a semicolon ";"</summary>
    public void AppendLineC(string str)
    {
        if (!string.IsNullOrWhiteSpace(str))
        {
            sourceBuilder.Append(indentation);
            sourceBuilder.Append(str);
            sourceBuilder.Append(';');
        }
        sourceBuilder.AppendLine();
    }
    public void IncreaseIdentation() => indentation.Append(IDENT);
    public void DecreaseIdentation() => indentation.Remove(0, 1);
    #endregion

    #region Extra
    public void OpenBracket()
    {
        AppendLine('{');
        IncreaseIdentation();
    }
    public void CloseBracket()
    {
        DecreaseIdentation();
        AppendLine('}');
    }
    public void CloseBracketC()
    {
        DecreaseIdentation();
        AppendLine("};");
    }

    public void AddUsing(string usignNS) => AppendLineC("using " + usignNS);
    public void AddNullable(bool nullable) => AppendLine("#nullable " + (nullable ? "enable" : "disable"));
    public void AddNamespaceFileScoped(string ns) => AppendLineC("namespace " + ns);
    public void AddAttribute(string attr) => AppendLine('[' + attr + ']');


    public void AddGeneratedCodeAttribute(string tool, string version = "1.0") =>
        AddAttribute($"global::System.CodeDom.Compiler.GeneratedCodeAttribute({tool}, {version})");

    public Action CreateNamespace(string ns)
    {
        AppendLine("namespace " + ns);
        OpenBracket();
        return CloseBracket;
    }
    public Action CreateBracketDeclaration(string declaration)
    {
        AppendLine(declaration);
        OpenBracket();
        return CloseBracket;
    }

    #endregion

#pragma warning disable RS1035 // Do not use APIs banned for analyzers
    public const string AUTO_GEN_MESSAGE = "/* <auto-generated> */";
    public override string ToString() => AUTO_GEN_MESSAGE + Environment.NewLine + sourceBuilder + AUTO_GEN_MESSAGE + Environment.NewLine;
#pragma warning restore RS1035 // Do not use APIs banned for analyzers

}